#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Output File Processing v1.11.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ Python —Å–∫—Ä–∏–ø—Ç–∞–º–∏
"""

import os
import json
import tempfile
import shutil
import subprocess
import sys
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
TEST_CONFIG = {
    "version": "1.11.0",
    "feature": "Output File Processing",
    "test_cases": [
        "text_file_generation",
        "json_export", 
        "multiple_files",
        "binary_file_creation",
        "directory_structure",
        "error_handling",
        "cleanup_verification"
    ]
}

class OutputFileProcessingTester:
    def __init__(self):
        self.test_results = []
        self.temp_dirs = []
        
    def setup_test_environment(self):
        """–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.base_temp_dir = tempfile.mkdtemp(prefix="n8n_output_test_")
        self.temp_dirs.append(self.base_temp_dir)
        print(f"‚úÖ Test environment created: {self.base_temp_dir}")
        
    def cleanup_test_environment(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—É"""
        for temp_dir in self.temp_dirs:
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
                print(f"üßπ Cleaned up: {temp_dir}")
                
    def create_output_directory(self):
        """–°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–∏–º–∏—Ç–∞—Ü–∏—è n8n)"""
        import time
        import random
        timestamp = int(time.time() * 1000)
        random_id = ''.join([chr(ord('a') + random.randint(0, 25)) for _ in range(6)])
        unique_id = f"n8n_python_output_{timestamp}_{random_id}"
        output_dir = os.path.join(self.base_temp_dir, unique_id)
        os.makedirs(output_dir, exist_ok=True)
        self.temp_dirs.append(output_dir)
        return output_dir
        
    def test_text_file_generation(self):
        """–¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        print("\nüìù Test 1: Text File Generation")
        
        output_dir = self.create_output_directory()
        
        # Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        script_code = f'''
import os
import datetime

# output_dir –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è n8n
output_dir = "{output_dir}"

# –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
report_path = os.path.join(output_dir, "test_report.txt")
with open(report_path, 'w', encoding='utf-8') as f:
    f.write(f"Test Report Generated: {{datetime.datetime.now()}}\\n")
    f.write("Status: SUCCESS\\n")
    f.write("Test Type: Text File Generation\\n")
    f.write("Content: Simple text content for testing\\n")

print(f"Created text file: {{report_path}}")
print(f"File size: {{os.path.getsize(report_path)}} bytes")
'''
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
        result = self.execute_python_script(script_code)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        expected_file = os.path.join(output_dir, "test_report.txt")
        if os.path.exists(expected_file):
            with open(expected_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            success = (
                "Test Report Generated:" in content and
                "Status: SUCCESS" in content and
                len(content) > 50
            )
            
            self.test_results.append({
                "test": "text_file_generation",
                "success": success,
                "details": {
                    "file_created": True,
                    "file_size": os.path.getsize(expected_file),
                    "content_preview": content[:100] + "..." if len(content) > 100 else content
                }
            })
            
            if success:
                print("‚úÖ Text file generated successfully")
                print(f"   File size: {os.path.getsize(expected_file)} bytes")
            else:
                print("‚ùå Text file content validation failed")
        else:
            print("‚ùå Text file was not created")
            self.test_results.append({
                "test": "text_file_generation", 
                "success": False,
                "error": "File not created"
            })
            
    def test_json_export(self):
        """–¢–µ—Å—Ç 2: –≠–∫—Å–ø–æ—Ä—Ç JSON –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä Test 2: JSON Export")
        
        output_dir = self.create_output_directory()
        
        # Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è JSON —ç–∫—Å–ø–æ—Ä—Ç–∞
        script_code = f'''
import os
import json
from datetime import datetime

output_dir = "{output_dir}"

# –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ
data = {{
    "timestamp": datetime.now().isoformat(),
    "test_info": {{
        "name": "JSON Export Test",
        "version": "1.11.0",
        "feature": "Output File Processing"
    }},
    "results": [
        {{"id": 1, "value": "test_value_1", "status": "completed"}},
        {{"id": 2, "value": "test_value_2", "status": "pending"}},
        {{"id": 3, "value": "test_value_3", "status": "failed"}}
    ],
    "statistics": {{
        "total_items": 3,
        "completed": 1,
        "pending": 1,
        "failed": 1
    }}
}}

# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON —Ñ–∞–π–ª
json_path = os.path.join(output_dir, "export_data.json")
with open(json_path, 'w', encoding='utf-8') as f:
    json.dump(data, f, indent=2, ensure_ascii=False)

print(f"Created JSON file: {{json_path}}")
print(f"Data keys: {{list(data.keys())}}")
'''
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
        result = self.execute_python_script(script_code)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        expected_file = os.path.join(output_dir, "export_data.json")
        if os.path.exists(expected_file):
            try:
                with open(expected_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                success = (
                    "test_info" in data and
                    "results" in data and
                    "statistics" in data and
                    len(data["results"]) == 3
                )
                
                self.test_results.append({
                    "test": "json_export",
                    "success": success,
                    "details": {
                        "file_created": True,
                        "valid_json": True,
                        "data_keys": list(data.keys()),
                        "results_count": len(data.get("results", []))
                    }
                })
                
                if success:
                    print("‚úÖ JSON export successful")
                    print(f"   Data keys: {list(data.keys())}")
                else:
                    print("‚ùå JSON data validation failed")
                    
            except json.JSONDecodeError as e:
                print(f"‚ùå Invalid JSON format: {e}")
                self.test_results.append({
                    "test": "json_export",
                    "success": False,
                    "error": f"Invalid JSON: {e}"
                })
        else:
            print("‚ùå JSON file was not created")
            self.test_results.append({
                "test": "json_export",
                "success": False, 
                "error": "File not created"
            })
            
    def test_multiple_files(self):
        """–¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\nüìÅ Test 3: Multiple Files Generation")
        
        output_dir = self.create_output_directory()
        
        # Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        script_code = f'''
import os
import json
import csv
from datetime import datetime

output_dir = "{output_dir}"

# 1. –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
text_path = os.path.join(output_dir, "summary.txt") 
with open(text_path, 'w') as f:
    f.write("Multi-file generation test\\n")
    f.write(f"Generated at: {{datetime.now()}}\\n")

# 2. –°–æ–∑–¥–∞—Ç—å JSON —Ñ–∞–π–ª
json_data = {{"files": ["summary.txt", "data.csv", "config.json"], "count": 3}}
json_path = os.path.join(output_dir, "config.json")
with open(json_path, 'w') as f:
    json.dump(json_data, f)

# 3. –°–æ–∑–¥–∞—Ç—å CSV —Ñ–∞–π–ª
csv_path = os.path.join(output_dir, "data.csv")
with open(csv_path, 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(["ID", "Name", "Value"])
    writer.writerow([1, "Test Item 1", 100])
    writer.writerow([2, "Test Item 2", 200])
    writer.writerow([3, "Test Item 3", 300])

# 4. –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
meta_path = os.path.join(output_dir, "metadata.txt")
files_info = []
for filename in ["summary.txt", "config.json", "data.csv"]:
    filepath = os.path.join(output_dir, filename)
    if os.path.exists(filepath):
        files_info.append(f"{{filename}}: {{os.path.getsize(filepath)}} bytes")

with open(meta_path, 'w') as f:
    f.write("Generated Files Metadata:\\n")
    f.write("\\n".join(files_info))

print(f"Created {{len(os.listdir(output_dir))}} files in {{output_dir}}")
'''
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
        result = self.execute_python_script(script_code)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        expected_files = ["summary.txt", "config.json", "data.csv", "metadata.txt"]
        created_files = os.listdir(output_dir) if os.path.exists(output_dir) else []
        
        success = all(f in created_files for f in expected_files) and len(created_files) == 4
        
        self.test_results.append({
            "test": "multiple_files",
            "success": success,
            "details": {
                "expected_files": expected_files,
                "created_files": created_files,
                "files_count": len(created_files)
            }
        })
        
        if success:
            print(f"‚úÖ Multiple files created successfully: {created_files}")
        else:
            print(f"‚ùå File creation failed. Expected: {expected_files}, Got: {created_files}")
            
    def test_error_handling(self):
        """–¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        print("\n‚ö†Ô∏è Test 4: Error Handling")
        
        output_dir = self.create_output_directory()
        
        # Python —Å–∫—Ä–∏–ø—Ç —Å –æ—à–∏–±–∫–æ–π –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        script_code = f'''
import os

output_dir = "{output_dir}"

try:
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    bad_path = os.path.join(output_dir, "nonexistent", "file.txt")
    with open(bad_path, 'w') as f:
        f.write("This should fail")
    print("ERROR: This should not be printed")
except Exception as e:
    print(f"Expected error caught: {{e}}")
    
    # –°–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
    good_path = os.path.join(output_dir, "recovery.txt")
    with open(good_path, 'w') as f:
        f.write("Recovered from error successfully")
    print(f"Recovery file created: {{good_path}}")
'''
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
        result = self.execute_python_script(script_code)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        recovery_file = os.path.join(output_dir, "recovery.txt")
        
        success = (
            os.path.exists(recovery_file) and
            "Expected error caught:" in result.get("stdout", "") and
            "Recovery file created:" in result.get("stdout", "")
        )
        
        self.test_results.append({
            "test": "error_handling",
            "success": success,
            "details": {
                "recovery_file_created": os.path.exists(recovery_file),
                "error_handled": "Expected error caught:" in result.get("stdout", ""),
                "stdout": result.get("stdout", "")
            }
        })
        
        if success:
            print("‚úÖ Error handling successful")
        else:
            print("‚ùå Error handling failed")
            
    def test_cleanup_verification(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
        print("\nüßπ Test 5: Cleanup Verification")
        
        # –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        temp_dirs = []
        for i in range(3):
            temp_dir = self.create_output_directory()
            temp_dirs.append(temp_dir)
            
            # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –≤ –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            test_file = os.path.join(temp_dir, f"temp_file_{i}.txt")
            with open(test_file, 'w') as f:
                f.write(f"Temporary file {i}")
                
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
        all_created = all(
            os.path.exists(os.path.join(d, f"temp_file_{i}.txt")) 
            for i, d in enumerate(temp_dirs)
        )
        
        # –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å cleanup
        cleanup_success = 0
        for temp_dir in temp_dirs:
            try:
                if os.path.exists(temp_dir):
                    shutil.rmtree(temp_dir)
                    cleanup_success += 1
            except Exception as e:
                print(f"Cleanup error: {e}")
                
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω—ã
        all_cleaned = all(not os.path.exists(d) for d in temp_dirs)
        
        success = all_created and all_cleaned and cleanup_success == 3
        
        self.test_results.append({
            "test": "cleanup_verification",
            "success": success,
            "details": {
                "dirs_created": len(temp_dirs),
                "all_created": all_created,
                "cleanup_success": cleanup_success,
                "all_cleaned": all_cleaned
            }
        })
        
        if success:
            print(f"‚úÖ Cleanup successful for {cleanup_success} directories")
        else:
            print("‚ùå Cleanup verification failed")
            
    def execute_python_script(self, script_code):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å Python —Å–∫—Ä–∏–ø—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        script_file = os.path.join(self.base_temp_dir, "test_script.py")
        
        with open(script_file, 'w', encoding='utf-8') as f:
            f.write(script_code)
            
        try:
            result = subprocess.run(
                [sys.executable, script_file],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            return {
                "returncode": result.returncode,
                "stdout": result.stdout,
                "stderr": result.stderr
            }
        except subprocess.TimeoutExpired:
            return {
                "returncode": -1,
                "stdout": "",
                "stderr": "Script execution timeout"
            }
        finally:
            if os.path.exists(script_file):
                os.remove(script_file)
                
    def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print(f"üöÄ Starting Output File Processing Integration Tests")
        print(f"Version: {TEST_CONFIG['version']}")
        print(f"Feature: {TEST_CONFIG['feature']}")
        print("=" * 60)
        
        self.setup_test_environment()
        
        try:
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            self.test_text_file_generation()
            self.test_json_export()
            self.test_multiple_files()
            self.test_error_handling()
            self.test_cleanup_verification()
            
        finally:
            self.cleanup_test_environment()
            
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_tests = len(self.test_results)
        passed_tests = sum(1 for r in self.test_results if r["success"])
        failed_tests = total_tests - passed_tests
        
        print("\n" + "=" * 60)
        print("üìã TEST RESULTS SUMMARY")
        print("=" * 60)
        print(f"Total Tests: {total_tests}")
        print(f"Passed: {passed_tests} ‚úÖ")
        print(f"Failed: {failed_tests} ‚ùå")
        print(f"Success Rate: {(passed_tests/total_tests)*100:.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä DETAILED RESULTS:")
        for result in self.test_results:
            status = "‚úÖ PASS" if result["success"] else "‚ùå FAIL"
            print(f"  {result['test']}: {status}")
            if not result["success"] and "error" in result:
                print(f"    Error: {result['error']}")
                
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        overall_success = failed_tests == 0
        print("\n" + "=" * 60)
        if overall_success:
            print("üéâ ALL TESTS PASSED! Output File Processing is working correctly!")
        else:
            print(f"‚ö†Ô∏è  {failed_tests} TESTS FAILED! Output File Processing needs fixes!")
        print("=" * 60)
        
        return overall_success

if __name__ == "__main__":
    tester = OutputFileProcessingTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1) 