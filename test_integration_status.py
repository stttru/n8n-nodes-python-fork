#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Output File Processing v1.11.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
"""

import re
import os
import json

def analyze_node_file():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —É–∑–ª–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Output File Processing"""
    
    node_file = "nodes/PythonFunction/PythonFunction.node.ts"
    
    if not os.path.exists(node_file):
        return {
            "status": "CRITICAL_ERROR",
            "error": "Main node file not found"
        }
    
    with open(node_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    checks = {
        "ui_configuration": {
            "name": "UI Configuration",
            "items": [
                ("outputFileProcessing section", r"displayName:\s*['\"]Output File Processing['\"]"),
                ("Enable toggle", r"name:\s*['\"]enabled['\"].*description.*detect.*process.*files"),
                ("Max file size", r"name:\s*['\"]maxOutputFileSize['\"]"),
                ("Auto cleanup", r"name:\s*['\"]autoCleanupOutput['\"]"),
                ("Include metadata", r"name:\s*['\"]includeOutputMetadata['\"]")
            ]
        },
        "interfaces": {
            "name": "TypeScript Interfaces",
            "items": [
                ("OutputFileProcessingOptions", r"interface\s+OutputFileProcessingOptions"),
                ("OutputFileInfo", r"interface\s+OutputFileInfo"),
                ("enabled property", r"enabled:\s*boolean"),
                ("maxOutputFileSize property", r"maxOutputFileSize:\s*number"),
                ("base64Data property", r"base64Data:\s*string")
            ]
        },
        "core_functions": {
            "name": "Core Functions",
            "items": [
                ("scanOutputDirectory", r"async\s+function\s+scanOutputDirectory"),
                ("getMimeType", r"function\s+getMimeType"),
                ("cleanupOutputDirectory", r"async\s+function\s+cleanupOutputDirectory"),
                ("createUniqueOutputDirectory", r"function\s+createUniqueOutputDirectory")
            ]
        },
        "script_generation": {
            "name": "Script Generation Integration",
            "items": [
                ("getScriptCode with outputDir", r"getScriptCode\([^)]*outputDir"),
                ("output_dir variable", r"output_dir\s*="),
                ("getTemporaryScriptPath with outputDir", r"getTemporaryScriptPath\([^)]*outputDir")
            ]
        },
        "execution_integration": {
            "name": "Execution Integration",
            "items": [
                ("executeOnce with outputDir", r"executeOnce\([^)]*outputDir"),
                ("executePerItem with outputDir", r"executePerItem\([^)]*outputDir"),
                ("outputFileProcessingConfig", r"outputFileProcessingConfig"),
                ("scanOutputDirectory call", r"scanOutputDirectory\("),
                ("binary data assignment", r"binary\[.*binaryKey\]")
            ]
        }
    }
    
    results = {}
    total_passed = 0
    total_checks = 0
    
    for category, info in checks.items():
        category_results = {
            "name": info["name"],
            "items": {},
            "passed": 0,
            "total": len(info["items"])
        }
        
        for item_name, pattern in info["items"]:
            found = bool(re.search(pattern, content, re.MULTILINE | re.DOTALL))
            category_results["items"][item_name] = found
            if found:
                category_results["passed"] += 1
                total_passed += 1
            total_checks += 1
            
        results[category] = category_results
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    completion_rate = (total_passed / total_checks) * 100 if total_checks > 0 else 0
    
    if completion_rate >= 90:
        status = "FULLY_INTEGRATED"
    elif completion_rate >= 70:
        status = "MOSTLY_INTEGRATED"
    elif completion_rate >= 50:
        status = "PARTIALLY_INTEGRATED"
    elif completion_rate >= 20:
        status = "BASIC_SETUP"
    else:
        status = "NOT_INTEGRATED"
    
    return {
        "status": status,
        "completion_rate": completion_rate,
        "total_passed": total_passed,
        "total_checks": total_checks,
        "details": results
    }

def check_file_existence():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    files_to_check = [
        "nodes/PythonFunction/PythonFunction.node.ts",
        "OUTPUT_FILE_PROCESSING_GUIDE.md",
        "CHANGELOG.md",
        "package.json"
    ]
    
    results = {}
    for file_path in files_to_check:
        results[file_path] = os.path.exists(file_path)
    
    return results

def check_version_consistency():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä—Å–∏–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    version_files = {
        "package.json": r'"version":\s*"([^"]+)"',
        "CHANGELOG.md": r"\[([0-9]+\.[0-9]+\.[0-9]+)\]",
        "OUTPUT_FILE_PROCESSING_GUIDE.md": r"v([0-9]+\.[0-9]+\.[0-9]+)"
    }
    
    versions = {}
    for file_path, pattern in version_files.items():
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            match = re.search(pattern, content)
            if match:
                versions[file_path] = match.group(1)
            else:
                versions[file_path] = "NOT_FOUND"
        else:
            versions[file_path] = "FILE_NOT_FOUND"
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    unique_versions = set(v for v in versions.values() if v not in ["NOT_FOUND", "FILE_NOT_FOUND"])
    consistent = len(unique_versions) <= 1
    
    return {
        "consistent": consistent,
        "versions": versions,
        "target_version": "1.11.0"
    }

def main():
    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–£–°–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò OUTPUT FILE PROCESSING")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    file_status = check_file_existence()
    for file_path, exists in file_status.items():
        status = "‚úÖ" if exists else "‚ùå"
        print(f"  {status} {file_path}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏–∏
    print("\nüè∑Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π:")
    version_status = check_version_consistency()
    for file_path, version in version_status["versions"].items():
        status = "‚úÖ" if version == "1.11.0" else "‚ö†Ô∏è "
        print(f"  {status} {file_path}: {version}")
    
    version_consistency = "‚úÖ" if version_status["consistent"] else "‚ùå"
    print(f"  {version_consistency} –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π: {version_status['consistent']}")
    
    # 3. –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
    print("\nüîß –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –∫–æ–¥–µ:")
    integration_status = analyze_node_file()
    
    if "error" in integration_status:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {integration_status['error']}")
        return
    
    print(f"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {integration_status['status']}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {integration_status['completion_rate']:.1f}%")
    print(f"üìã –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {integration_status['total_passed']}/{integration_status['total_checks']}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüìÇ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, details in integration_status["details"].items():
        passed = details["passed"]
        total = details["total"]
        percentage = (passed / total) * 100 if total > 0 else 0
        
        status_icon = "‚úÖ" if percentage == 100 else "‚ö†Ô∏è " if percentage >= 50 else "‚ùå"
        print(f"\n  {status_icon} {details['name']}: {passed}/{total} ({percentage:.0f}%)")
        
        for item_name, found in details["items"].items():
            item_status = "  ‚úì" if found else "  ‚úó"
            print(f"    {item_status} {item_name}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if integration_status["status"] == "FULLY_INTEGRATED":
        print("  üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("  ‚úÖ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤ n8n")
        
    elif integration_status["status"] == "MOSTLY_INTEGRATED":
        print("  üî® –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞:")
        missing_categories = [
            cat for cat, details in integration_status["details"].items()
            if details["passed"] < details["total"]
        ]
        for cat in missing_categories:
            print(f"    - –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {integration_status['details'][cat]['name']}")
            
    elif integration_status["status"] == "PARTIALLY_INTEGRATED":
        print("  üöß –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        print("    - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ execute —Ñ—É–Ω–∫—Ü–∏–∏")
        print("    - –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        print("    - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å binary data —Å–∏—Å—Ç–µ–º–æ–π n8n")
        
    elif integration_status["status"] == "BASIC_SETUP":
        print("  üèóÔ∏è  –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –µ—Å—Ç—å, –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:")
        print("    - –î–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –≤ execution pipeline")
        print("    - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å getScriptCode —Å outputDir")
        print("    - –î–æ–±–∞–≤–∏—Ç—å binary data –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
    else:
        print("  üî¥ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:")
        print("    - –î–æ–±–∞–≤–∏—Ç—å UI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print("    - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å core —Ñ—É–Ω–∫—Ü–∏–∏")
        print("    - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ execution flow")
        
    print("\n" + "=" * 60)
    print(f"üéØ –ò–¢–û–ì: {integration_status['status']} ({integration_status['completion_rate']:.1f}% –≥–æ—Ç–æ–≤–æ)")
    print("=" * 60)

if __name__ == "__main__":
    main() 