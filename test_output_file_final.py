#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Output File Processing —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
"""

import os
import sys
import tempfile
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'nodes', 'PythonFunction'))

def test_output_file_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Output File Processing"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OUTPUT FILE PROCESSING –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ TypeScript —Ñ–∞–π–ª–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ TypeScript
    
    # 1. –¢–µ—Å—Ç createUniqueOutputDirectory
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç createUniqueOutputDirectory:")
    try:
        # –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        import time
        import random
        timestamp = int(time.time() * 1000)
        random_id = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz0123456789', k=6))
        unique_id = f"n8n_python_output_{timestamp}_{random_id}"
        output_dir = os.path.join(tempfile.gettempdir(), unique_id)
        
        os.makedirs(output_dir, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
        
        # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_files = [
            ("output.txt", "Hello from Python script!"),
            ("data.json", '{"result": "success", "count": 42}'),
            ("report.csv", "name,value\ntest1,100\ntest2,200")
        ]
        
        created_files = []
        for filename, content in test_files:
            filepath = os.path.join(output_dir, filename)
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            created_files.append(filepath)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename} ({len(content)} –±–∞–π—Ç)")
        
        # 3. –¢–µ—Å—Ç scanOutputDirectory (—Å–∏–º—É–ª—è—Ü–∏—è)
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç scanOutputDirectory:")
        
        output_files = []
        if os.path.exists(output_dir):
            files = os.listdir(output_dir)
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            
            for filename in files:
                filepath = os.path.join(output_dir, filename)
                if os.path.isfile(filepath):
                    stats = os.stat(filepath)
                    size_mb = stats.st_size / (1024 * 1024)
                    
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                    with open(filepath, 'rb') as f:
                        content = f.read()
                    
                    import base64
                    base64_data = base64.b64encode(content).decode('utf-8')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                    extension = os.path.splitext(filename)[1].lower().lstrip('.')
                    mime_types = {
                        'txt': 'text/plain',
                        'json': 'application/json',
                        'csv': 'text/csv',
                    }
                    mimetype = mime_types.get(extension, 'application/octet-stream')
                    
                    output_file = {
                        'filename': filename,
                        'size': stats.st_size,
                        'mimetype': mimetype,
                        'extension': extension,
                        'base64Data': base64_data,
                        'binaryKey': f'output_{filename}'
                    }
                    
                    output_files.append(output_file)
                    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: {filename} ({size_mb:.3f}MB, {mimetype})")
        
        # 4. –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n binary data
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n binary data:")
        
        n8n_binary_data = {}
        for output_file in output_files:
            binary_key = output_file['binaryKey']
            n8n_binary_data[binary_key] = {
                'data': output_file['base64Data'],
                'mimeType': output_file['mimetype'],
                'fileExtension': output_file['extension'],
                'fileName': output_file['filename']
            }
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ n8n binary: {binary_key}")
        
        # 5. –¢–µ—Å—Ç cleanup
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç cleanupOutputDirectory:")
        
        cleaned_files = 0
        for filepath in created_files:
            if os.path.exists(filepath):
                os.unlink(filepath)
                cleaned_files += 1
        
        if os.path.exists(output_dir):
            os.rmdir(output_dir)
            print(f"‚úÖ –û—á–∏—â–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir} ({cleaned_files} —Ñ–∞–π–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ)")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(test_files)}")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(output_files)}")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ n8n binary: {len(n8n_binary_data)}")
        print(f"‚úÖ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_files}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_integration_with_python_script():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Python —Å–∫—Ä–∏–ø—Ç–æ–º"""
    print("\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° PYTHON –°–ö–†–ò–ü–¢–û–ú")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir = tempfile.mkdtemp(prefix="n8n_python_output_test_")
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º Python —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã
    python_script = f'''
import os
import json

# –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä
output_dir = r"{output_dir}"

# –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
files_created = []

# 1. –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
txt_file = os.path.join(output_dir, "result.txt")
with open(txt_file, "w", encoding="utf-8") as f:
    f.write("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python —Å–∫—Ä–∏–ø—Ç–∞\\n")
    f.write("–í—Ä–µ–º—è: 2024-01-15 12:00:00\\n")
    f.write("–°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ")
files_created.append("result.txt")

# 2. JSON —Ñ–∞–π–ª
json_file = os.path.join(output_dir, "data.json")
data = {{
    "status": "success",
    "processed_items": 42,
    "timestamp": "2024-01-15T12:00:00Z",
    "files_created": files_created
}}
with open(json_file, "w", encoding="utf-8") as f:
    json.dump(data, f, indent=2, ensure_ascii=False)
files_created.append("data.json")

# 3. CSV —Ñ–∞–π–ª
csv_file = os.path.join(output_dir, "report.csv")
with open(csv_file, "w", encoding="utf-8") as f:
    f.write("id,name,value,status\\n")
    f.write("1,Item 1,100,active\\n")
    f.write("2,Item 2,200,inactive\\n")
    f.write("3,Item 3,300,active\\n")
files_created.append("report.csv")

print(f"–°–æ–∑–¥–∞–Ω–æ {{len(files_created)}} —Ñ–∞–π–ª–æ–≤ –≤ {{output_dir}}")
for filename in files_created:
    filepath = os.path.join(output_dir, filename)
    size = os.path.getsize(filepath)
    print(f"  - {{filename}}: {{size}} –±–∞–π—Ç")
'''
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º Python —Å–∫—Ä–∏–ø—Ç
        print("\nüêç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python —Å–∫—Ä–∏–ø—Ç–∞:")
        exec(python_script)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        files = os.listdir(output_dir)
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        
        total_size = 0
        for filename in files:
            filepath = os.path.join(output_dir, filename)
            size = os.path.getsize(filepath)
            total_size += size
            print(f"  ‚úÖ {filename}: {size} –±–∞–π—Ç")
        
        print(f"\nüìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç ({total_size/1024:.2f} KB)")
        
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        shutil.rmtree(output_dir)
        print(f"üßπ –û—á–∏—â–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OUTPUT FILE PROCESSING")
    print("=" * 80)
    
    success_count = 0
    total_tests = 2
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if test_output_file_functions():
        success_count += 1
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Python —Å–∫—Ä–∏–ø—Ç–æ–º
    if test_integration_with_python_script():
        success_count += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 80)
    print("üìà –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/total_tests)*100:.1f}%")
    
    if success_count == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚ú® Output File Processing —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    return success_count == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 