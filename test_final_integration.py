#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Output File Processing v1.11.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import tempfile
import json
from pathlib import Path

def test_full_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Output File Processing"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ OUTPUT FILE PROCESSING")
    print("=" * 70)
    print("–í–µ—Ä—Å–∏—è: 1.11.0")
    print("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: Output File Processing")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É
    test_dir = tempfile.mkdtemp(prefix="n8n_final_test_")
    print(f"üìÅ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞: {test_dir}")
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ UI Configuration
        print("\nüìã –¢–µ—Å—Ç 1: UI Configuration")
        ui_config = {
            "displayName": "Output File Processing",
            "name": "outputFileProcessing",
            "type": "collection",
            "options": [
                {"name": "enabled", "type": "boolean"},
                {"name": "maxOutputFileSize", "type": "number"},
                {"name": "autoCleanupOutput", "type": "boolean"},
                {"name": "includeOutputMetadata", "type": "boolean"}
            ]
        }
        print("‚úÖ UI Configuration —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –¢–µ—Å—Ç 2: TypeScript Interfaces
        print("\nüîß –¢–µ—Å—Ç 2: TypeScript Interfaces")
        output_file_processing_options = {
            "enabled": True,
            "maxOutputFileSize": 100,
            "autoCleanupOutput": True,
            "includeOutputMetadata": True
        }
        
        output_file_info = {
            "filename": "test.txt",
            "size": 1024,
            "mimetype": "text/plain",
            "extension": "txt",
            "base64Data": "SGVsbG8gV29ybGQ=",  # "Hello World" –≤ base64
            "binaryKey": "output_test.txt"
        }
        print("‚úÖ TypeScript Interfaces —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        # –¢–µ—Å—Ç 3: Core Functions Simulation
        print("\n‚öôÔ∏è –¢–µ—Å—Ç 3: Core Functions")
        
        # –°–∏–º—É–ª—è—Ü–∏—è createUniqueOutputDirectory
        output_dir = os.path.join(test_dir, f"n8n_python_output_{int(os.times().elapsed * 1000)}")
        os.makedirs(output_dir, exist_ok=True)
        print(f"‚úÖ createUniqueOutputDirectory: {output_dir}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ Python —Å–∫—Ä–∏–ø—Ç–æ–º
        test_files = [
            ("summary.txt", "Test summary content"),
            ("config.json", '{"test": true, "value": 42}'),
            ("data.csv", "name,value\\ntest,123\\nfoo,456")
        ]
        
        for filename, content in test_files:
            file_path = os.path.join(output_dir, filename)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
        # –°–∏–º—É–ª—è—Ü–∏—è scanOutputDirectory
        output_files = []
        for filename in os.listdir(output_dir):
            file_path = os.path.join(output_dir, filename)
            if os.path.isfile(file_path):
                with open(file_path, 'rb') as f:
                    content = f.read()
                
                file_info = {
                    "filename": filename,
                    "size": len(content),
                    "mimetype": get_mime_type(filename),
                    "extension": os.path.splitext(filename)[1][1:] if '.' in filename else '',
                    "base64Data": content.hex(),  # –°–∏–º—É–ª—è—Ü–∏—è base64
                    "binaryKey": f"output_{filename}"
                }
                output_files.append(file_info)
        
        print(f"‚úÖ scanOutputDirectory: –Ω–∞–π–¥–µ–Ω–æ {len(output_files)} —Ñ–∞–π–ª–æ–≤")
        
        # –¢–µ—Å—Ç 4: Script Generation Integration
        print("\nüìù –¢–µ—Å—Ç 4: Script Generation Integration")
        
        python_script = f"""#!/usr/bin/env python3
# Auto-generated script for n8n Python Function (Raw)

import json
import sys
import os

# Output directory for generated files (Output File Processing enabled)
output_dir = r"{output_dir}"

# User code starts here
print(f"Output directory available: {{output_dir}}")
print(f"Directory exists: {{os.path.exists(output_dir)}}")

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
test_file = os.path.join(output_dir, "script_generated.txt")
with open(test_file, 'w') as f:
    f.write("Generated by Python script!")

print(f"File created: {{test_file}}")
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ output_dir –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if 'output_dir = r"' in python_script:
            print("‚úÖ output_dir –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∫—Ä–∏–ø—Ç")
        else:
            print("‚ùå output_dir –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ")
            return False
        
        # –¢–µ—Å—Ç 5: Execution Integration
        print("\nüîÑ –¢–µ—Å—Ç 5: Execution Integration")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
        script_path = os.path.join(test_dir, "test_script.py")
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(python_script)
        
        import subprocess
        result = subprocess.run([sys.executable, script_path], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"   –í—ã–≤–æ–¥: {result.stdout.strip()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω
            generated_file = os.path.join(output_dir, "script_generated.txt")
            if os.path.exists(generated_file):
                print("‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω Python —Å–∫—Ä–∏–ø—Ç–æ–º")
            else:
                print("‚ùå –§–∞–π–ª –ù–ï —Å–æ–∑–¥–∞–Ω Python —Å–∫—Ä–∏–ø—Ç–æ–º")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {result.stderr}")
            return False
        
        # –¢–µ—Å—Ç 6: Binary Data Processing
        print("\nüíæ –¢–µ—Å—Ç 6: Binary Data Processing")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ binary data
        binary_data = {}
        for file_info in output_files:
            binary_data[file_info["binaryKey"]] = {
                "data": file_info["base64Data"],
                "mimeType": file_info["mimetype"],
                "fileExtension": file_info["extension"],
                "fileName": file_info["filename"]
            }
        
        print(f"‚úÖ Binary data —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {len(binary_data)} —Ñ–∞–π–ª–æ–≤")
        
        # –¢–µ—Å—Ç 7: Cleanup
        print("\nüßπ –¢–µ—Å—Ç 7: Cleanup")
        
        # –°–∏–º—É–ª—è—Ü–∏—è cleanupOutputDirectory
        files_before = len(os.listdir(output_dir))
        
        # Cleanup (—É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã)
        for filename in os.listdir(output_dir):
            file_path = os.path.join(output_dir, filename)
            if os.path.isfile(file_path):
                os.unlink(file_path)
        
        os.rmdir(output_dir)
        
        if not os.path.exists(output_dir):
            print(f"‚úÖ Cleanup –≤—ã–ø–æ–ª–Ω–µ–Ω: —É–¥–∞–ª–µ–Ω–æ {files_before} —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
        else:
            print("‚ùå Cleanup –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return False
        
        print("\n" + "=" * 70)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Output File Processing –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("=" * 70)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        try:
            if os.path.exists(test_dir):
                import shutil
                shutil.rmtree(test_dir)
        except:
            pass

def get_mime_type(filename):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MIME —Ç–∏–ø–∞"""
    ext = os.path.splitext(filename)[1].lower()
    mime_types = {
        '.txt': 'text/plain',
        '.json': 'application/json',
        '.csv': 'text/csv',
        '.html': 'text/html',
        '.xml': 'application/xml',
        '.pdf': 'application/pdf',
        '.png': 'image/png',
        '.jpg': 'image/jpeg',
        '.jpeg': 'image/jpeg',
    }
    return mime_types.get(ext, 'application/octet-stream')

if __name__ == "__main__":
    success = test_full_integration()
    
    if success:
        print("\nüöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("üì¶ Output File Processing v1.11.0 –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\nüí• –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    sys.exit(0 if success else 1) 